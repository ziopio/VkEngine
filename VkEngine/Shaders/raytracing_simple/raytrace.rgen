#version 460
#extension GL_EXT_ray_tracing : require

#include "..\commons.glsl"
#include "raycommon.glsl"

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 1, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = 1, rgba8) uniform image2D image;

layout(set = 2, binding = 0)uniform uniBlock {
	mat4 P_inverted;
	mat4 V_inverted;  
    Light global_light;
	Light lights[10];
	int light_count;
} uniforms;

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin    = uniforms.V_inverted * vec4(0, 0, 0, 1);
    vec4 target    = uniforms.P_inverted * vec4(d.x, d.y, 1, 1);
    vec4 direction = uniforms.V_inverted * vec4(normalize(target.xyz), 0);
    
    uint  rayFlags = gl_RayFlagsNoneEXT;//gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    prd.hitValue    = vec4(0,0,0,0);
    prd.depth       = 0;
    prd.stop        = 1;
    prd.rayOrigin   = origin.xyz;
    prd.rayDir      = direction.xyz;    
    prd.attenuation = vec3(1.f, 1.f, 1.f);
    vec4 finalHitValue = vec4(0,0,0,0);

    for(;;)
    {
        traceRayEXT(topLevelAS,     // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            origin.xyz,     // ray origin
            tMin,           // ray min range
            direction.xyz,  // ray direction
            tMax,           // ray max range
            0               // payload (location = 0)
        );

        //Iterating through semi-trasparent objects
        while(prd.hitValue.a < 1.0f && prd.stop == 1){
            origin.xyz    = prd.rayOrigin;
            direction.xyz = prd.rayDir;
            traceRayEXT(topLevelAS,     // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            origin.xyz,     // ray origin
            tMin,           // ray min range
            direction.xyz,  // ray direction
            tMax,           // ray max range
            0               // payload (location = 0)
            );
        }

        //finalHitValue.xyz = prd.hitValue.xyz * prd.attenuation;
        finalHitValue.xyz = (prd.hitValue.xyz * prd.attenuation ) * (1.f - finalHitValue.a)
        + (finalHitValue.xyz * finalHitValue.a);
        finalHitValue.a += prd.hitValue.a;

        prd.hitValue = vec4(0);

        prd.depth++;
        if(prd.stop == 1 || prd.depth >= 10)
        break;

        origin.xyz    = prd.rayOrigin;
        direction.xyz = prd.rayDir;
        prd.stop      = 1; // Will stop if a reflective material isn't hit
    }

  
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), finalHitValue);
}
